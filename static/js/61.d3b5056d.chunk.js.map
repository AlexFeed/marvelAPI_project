{"version":3,"file":"static/js/61.d3b5056d.chunk.js","mappings":"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","sources":["components/errorBoundary/ErrorBoundary.js","components/errorMessage/ErrorMessage.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/findChar/FindCharForm.js","components/pages/MainPage.js","services/useMarvelService.js","hooks/http.hook.js"],"sourcesContent":["import {Component} from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        console.log(error, errorInfo);\r\n        this.setState({error: true});\r\n    }\r\n\r\n    render () {\r\n        const {error} = this.state;\r\n\r\n        if (error) {\r\n            return <ErrorMessage/>\r\n        } else {\r\n            return this.props.children;\r\n        }\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import errorImg from './error.png';\r\n\r\nimport './errorMessage.scss';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <div className=\"errorBlock\">\r\n            <h1 className=\"errorTitle\">Something went wrong, please try it later:(</h1>\r\n            <img className=\"errorImg\" src={errorImg}  alt=\"Error\"/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import {useEffect, useState} from 'react';\r\nimport useMarvelService from \"../../services/useMarvelService\";\r\n\r\nimport Spinner from \"../spinner/Spinner\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nimport './randomChar.scss';\r\n\r\nimport mjolnir from '../../resources/img/mjolnir.png';\r\n\r\nconst RandomChar = (props) => {\r\n\r\n    const [character, setCharacter] = useState({});\r\n\r\n    const {loading, error, getCharacterInfo, clearError} = useMarvelService();\r\n\r\n    const onCharLoaded = (charInfo) => {\r\n        setCharacter(charInfo);\r\n    }\r\n\r\n    const setRandomChar = () => {\r\n        clearError();\r\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\r\n        getCharacterInfo(id).then(onCharLoaded);\r\n    }\r\n\r\n    useEffect(() => {\r\n        setRandomChar();\r\n    }, []);\r\n\r\n\r\n    const onTryItClick = () => {\r\n        setRandomChar();\r\n    }\r\n\r\n    const errorMessage = error ? <ErrorMessage/> : null;\r\n    const spinner = loading ? <Spinner/> : null;\r\n    const content = !(loading || error) ? <CharacterView characterInfo={character}/> : null;\r\n\r\n    return (\r\n        <div className=\"randomchar\">\r\n            {errorMessage}\r\n            {content}\r\n            {spinner}\r\n            <div className=\"randomchar__static\">\r\n                <p className=\"randomchar__title\">\r\n                    Random character for today!<br/>\r\n                    Do you want to get to know him better?\r\n                </p>\r\n                <p className=\"randomchar__title\">\r\n                    Or choose another one\r\n                </p>\r\n                <button onClick={onTryItClick} className=\"button button__main\">\r\n                    <div className=\"inner\">try it</div>\r\n                </button>\r\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst CharacterView = ({characterInfo: {name, description, thumbnail, homepage, wiki}}) => {\r\n    let notFoundImgStyle;\r\n    if (thumbnail === \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\" || \"http://i.annihil.us/u/prod/marvel/i/mg/f/60/4c002e0305708.gif\") {\r\n        notFoundImgStyle = {objectFit: 'contain'};\r\n    }\r\n\r\n    return (\r\n        <div className=\"randomchar__block\">\r\n            <img style={notFoundImgStyle} src={thumbnail} alt=\"Random character\" className=\"randomchar__img\"/>\r\n            <div className=\"randomchar__info\">\r\n                <p className=\"randomchar__name\">{name}</p>\r\n                <p className=\"randomchar__descr\">{description ? description : 'This character does not have a description.'}</p>\r\n                <div className=\"randomchar__btns\">\r\n                    <a href={homepage} className=\"button button__main\">\r\n                        <div className=\"inner\">homepage</div>\r\n                    </a>\r\n                    <a href={wiki} className=\"button button__secondary\">\r\n                        <div className=\"inner\">Wiki</div>\r\n                    </a>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RandomChar;","import React, {useEffect, useRef, useState} from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport {CSSTransition, TransitionGroup} from \"react-transition-group\";\r\n\r\nimport useMarvelService from \"../../services/useMarvelService\";\r\n\r\nimport Spinner from \"../spinner/Spinner\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nimport './charList.scss';\r\n\r\n\r\nconst CharList = ({onCharSelected}) => {\r\n\r\n    const [characters, setCharacters] = useState([]);\r\n    const [loadingMore, setLoadingMore] = useState(false);\r\n    const [offset, setOffset] = useState(210);\r\n    const [charListEnded, setCharListEnded] = useState(false);\r\n    const [prevClickedChar, setPrevClickedChar] = useState(null);\r\n\r\n    const {loading, error, getCharactersList} = useMarvelService();\r\n\r\n    const onCharListLoaded = (newCharListInfo) => {\r\n        if (newCharListInfo.length < 9) {\r\n            setCharListEnded(true);\r\n        }\r\n\r\n        setCharacters(characters => [...characters, ...newCharListInfo]);\r\n        setLoadingMore(false);\r\n        setOffset(offset => offset + 9);\r\n    };\r\n\r\n    const updateCharList = (offset, initial) => {\r\n        initial ? setLoadingMore(false) : setLoadingMore(true);\r\n        getCharactersList(offset).then(onCharListLoaded);\r\n    }\r\n\r\n    useEffect(() => {\r\n        updateCharList(offset, true)\r\n    }, []);\r\n\r\n    const onCharFocused = (charRef) => {\r\n        if (charRef.current) charRef = charRef.current;\r\n\r\n        if (prevClickedChar) prevClickedChar.classList.remove(\"char__item_selected\");\r\n\r\n        charRef.classList.add(\"char__item_selected\");\r\n        charRef.focus();\r\n\r\n        setPrevClickedChar(charRef);\r\n    }\r\n\r\n\r\n    const charItemsList = characters.map(characterInfo => {\r\n        return (\r\n            <CSSTransition key={characterInfo.id} timeout={500} classNames=\"char__transition\">\r\n                <CharacterItem onCharSelected={() => onCharSelected(characterInfo.id)}\r\n                               name={characterInfo.name} thumbnail={characterInfo.thumbnail}\r\n                               onCharFocused={onCharFocused}/>\r\n            </CSSTransition>\r\n        )\r\n    })\r\n\r\n    const spinner = loading && !loadingMore ? <Spinner/> : null;\r\n    const errorMessage = error ? <ErrorMessage/> : null;\r\n    const styleButton = {'display': charListEnded ? 'none' : 'block'};\r\n\r\n    return (\r\n        <div className=\"char__list\">\r\n            {errorMessage}\r\n            {spinner}\r\n            <ul className=\"char__grid\">\r\n                <TransitionGroup className=\"char__transitionGroup char__grid\">\r\n                    {charItemsList}\r\n                </TransitionGroup>\r\n            </ul>\r\n            <button style={styleButton} onClick={() => updateCharList(offset, false)}\r\n                    className=\"button button__main button__long\"\r\n                    disabled={loadingMore}>\r\n                <div className=\"inner\">load more</div>\r\n            </button>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nCharList.propTypes = {\r\n    onCharSelected: PropTypes.func.isRequired\r\n}\r\n\r\nconst CharacterItem = ({name, thumbnail, onCharSelected, onCharFocused}) => {\r\n\r\n    const charRef = useRef(null);\r\n\r\n    let notFoundImgStyle;\r\n    if (thumbnail === \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\" || \"http://i.annihil.us/u/prod/marvel/i/mg/f/60/4c002e0305708.gif\") {\r\n        notFoundImgStyle = {objectFit: 'contain'};\r\n    }\r\n\r\n    return (\r\n        <li ref={charRef}\r\n            onClick={() => {\r\n                onCharSelected();\r\n                onCharFocused(charRef)\r\n            }}\r\n            onKeyPress={e => {\r\n                if (e.key === ' ' || e.key === \"Enter\") {\r\n                    onCharSelected();\r\n                    onCharFocused(charRef);\r\n                }\r\n            }}\r\n            tabIndex={0}\r\n            className=\"char__item\">\r\n            <img style={notFoundImgStyle} src={thumbnail} alt=\"abyss\"/>\r\n            <div className=\"char__name\">{name}</div>\r\n        </li>\r\n    )\r\n}\r\n\r\n\r\nCharacterItem.propTypes = {\r\n    name: PropTypes.any,\r\n    thumbnail: PropTypes.any,\r\n    onCharSelected: PropTypes.any\r\n}\r\n\r\nexport default CharList;","import './skeleton.scss';\r\n\r\nconst Skeleton = () => {\r\n    return (\r\n        <>\r\n            <p className=\"char__select\">Please select a character to see information</p>\r\n            <div className=\"skeleton\">\r\n                <div className=\"pulse skeleton__header\">\r\n                    <div className=\"pulse skeleton__circle\"></div>\r\n                    <div className=\"pulse skeleton__mini\"></div>\r\n                </div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Skeleton;","import {useEffect, useState} from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport useMarvelService from \"../../services/useMarvelService\";\r\n\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\nimport Spinner from \"../spinner/Spinner\";\r\nimport Skeleton from \"../skeleton/Skeleton\";\r\n\r\nimport './charInfo.scss';\r\n\r\nconst CharInfo = ({charSelectedId}) => {\r\n\r\n    const [character, setCharacter] = useState(null);\r\n\r\n    const {loading, error, getCharacterInfo, clearError} = useMarvelService();\r\n\r\n    const onCharLoaded = (charInfo) => {\r\n        setCharacter(charInfo);\r\n    };\r\n\r\n    const setCharInfo = (id) => {\r\n        clearError();\r\n        if (!id) return;\r\n        getCharacterInfo(id).then(onCharLoaded);\r\n    }\r\n\r\n    useEffect(() => {\r\n        setCharInfo(charSelectedId)\r\n    }, [charSelectedId]);\r\n\r\n    const skeleton = character || error || loading ? null : <Skeleton/>;\r\n    const errorMessage = error ? <ErrorMessage/> : null;\r\n    const spinner = loading ? <Spinner/> : null;\r\n    const content = !(loading || error || !character) ? <CharacterView characterInfo={character}/> : null;\r\n\r\n    return (\r\n        <div className=\"char__info\">\r\n            {skeleton}\r\n            {errorMessage}\r\n            {spinner}\r\n            {content}\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nCharInfo.propTypes = {\r\n    charSelectedId: PropTypes.number\r\n}\r\n\r\nconst CharacterView = ({characterInfo, maxComicsLength = 10}) => {\r\n    let {name, thumbnail, description, homepage, wiki, comics} = characterInfo;\r\n\r\n    if (maxComicsLength) {\r\n        comics = comics.slice(0, maxComicsLength)\r\n    }\r\n\r\n    let notFoundImgStyle;\r\n    if (thumbnail === \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\" || \"http://i.annihil.us/u/prod/marvel/i/mg/f/60/4c002e0305708.gif\") {\r\n        notFoundImgStyle = {objectFit: 'contain'};\r\n    }\r\n\r\n    const comicsList = comics.map((comics, i) => {\r\n        return (\r\n            <li key={i} className=\"char__comics-item\">\r\n                {comics.name}\r\n            </li>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <>\r\n            <div className=\"char__basics\">\r\n                <img style={notFoundImgStyle} src={thumbnail} alt={name}/>\r\n                <div>\r\n                    <div className=\"char__info-name\">{name}</div>\r\n                    <div className=\"char__btns\">\r\n                        <a href={homepage} className=\"button button__main\">\r\n                            <div className=\"inner\">Homepage</div>\r\n                        </a>\r\n                        <a href={wiki} className=\"button button__secondary\">\r\n                            <div className=\"inner\">Wiki</div>\r\n                        </a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"char__descr\">\r\n                {description}\r\n            </div>\r\n            {\r\n                comics.length > 0 &&\r\n                <>\r\n                    <div className=\"char__comics\">Comics:</div>\r\n                    <ul className=\"char__comics-list\">\r\n                        {comicsList}\r\n                    </ul>\r\n                </>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CharInfo;","import {ErrorMessage as FormikErrorMessage, Field, Form, Formik} from 'formik';\r\nimport * as yup from 'yup';\r\nimport {useState} from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nimport useMarvelService from \"../../services/useMarvelService\";\r\n\r\nimport './findCharForm.scss';\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\n\r\nconst FindCharForm = () => {\r\n    const {loading, error, getCharacterByName, clearError} = useMarvelService();\r\n    const [charData, setCharData] = useState(null);\r\n\r\n\r\n    const initialValues = {\r\n        charName: ''\r\n    }\r\n\r\n    const onCharLoaded = (charInfo) => {\r\n        setCharData(charInfo)\r\n    }\r\n\r\n    const onSubmit = values => {\r\n        clearError();\r\n        getCharacterByName(values.charName).then(onCharLoaded)\r\n    }\r\n\r\n    const validationSchema = yup.object({\r\n        charName: yup.string().required('This field is required')\r\n    })\r\n\r\n    const CharMatchLayout = ({char}) => {\r\n        return (\r\n            <div className=\"char__search-wrapper\">\r\n                <div className=\"char__search-success\">There is! Visit {char.name} page?</div>\r\n                <Link to={`/characters/${char.id}`} className=\"button button__secondary\">\r\n                    <div className=\"inner\">To page</div>\r\n                </Link>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const NoMatchLayout = () => {\r\n        return (\r\n            <div className=\"char__search-error\">\r\n                The character was not found. Check the name and try again\r\n            </div>\r\n        )\r\n    }\r\n\r\n    let results;\r\n\r\n    if (charData) {\r\n        results = charData.length > 0 ? <CharMatchLayout char={charData[0]}/> : <NoMatchLayout/>;\r\n    }\r\n\r\n    const errorMessage = error ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\r\n\r\n    return (\r\n        <div className=\"char__search-form\">\r\n            <Formik initialValues={initialValues} onSubmit={onSubmit} validationSchema={validationSchema}>\r\n                <Form>\r\n                    <label className=\"char__search-label\" htmlFor={'find character by name'}>Or find a character by\r\n                        name:</label>\r\n                    <div className=\"char__search-wrapper\">\r\n                        <Field id=\"charName\" name={'charName'} type={'text'} placeholder=\"Enter name\"/>\r\n                        <button type=\"submit\" className=\"button button__main\">\r\n                            <div className=\"inner\">find</div>\r\n                        </button>\r\n                    </div>\r\n                    <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\r\n                </Form>\r\n            </Formik>\r\n            {results}\r\n            {errorMessage}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FindCharForm;","import {useState} from \"react\";\r\nimport {Helmet} from \"react-helmet\";\r\n\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\n\r\nimport decoration from \"../../resources/img/vision.png\";\r\nimport FindCharForm from \"../findChar/FindCharForm\";\r\n\r\n\r\nconst MainPage = () => {\r\n    const [selectedCharId, setSelectedCharId] = useState(0);\r\n\r\n    const onCharSelected = (id) => {\r\n        setSelectedCharId(id)\r\n    };\r\n\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"Marvel information portal\"\r\n                />\r\n                <title>Marvel information portal</title>\r\n            </Helmet>\r\n            <ErrorBoundary>\r\n                <RandomChar/>\r\n            </ErrorBoundary>\r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                    <CharList onCharSelected={onCharSelected}/>\r\n                </ErrorBoundary>\r\n                <div>\r\n                    <ErrorBoundary>\r\n                        <CharInfo charSelectedId={selectedCharId}/>\r\n                    </ErrorBoundary>\r\n                    <ErrorBoundary>\r\n                        <FindCharForm/>\r\n                    </ErrorBoundary>\r\n                </div>\r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage;","import {useHttp} from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n    const {loading, request, error, clearError} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey= '&apikey=94cd8f145a0551e6b7ef67f3edad94c9';\r\n    const _baseOffset = 210;\r\n\r\n    const _transformCharacterInfo = (characterInfo) => {\r\n        return {\r\n            id: characterInfo.id,\r\n            name: characterInfo.name.length > 50 ? `${characterInfo.name.slice(0, 50)}...` : characterInfo.name,\r\n            description: characterInfo.description ? `${characterInfo.description.slice(0, 210)}...` : 'There is no description for this character',\r\n            thumbnail: characterInfo.thumbnail.path + '.' + characterInfo.thumbnail.extension,\r\n            homepage: characterInfo.urls[0].url,\r\n            wiki: characterInfo.urls[1].url,\r\n            comics: characterInfo.comics.items\r\n        }\r\n    }\r\n\r\n    const getCharactersList = async (offset = _baseOffset) => {\r\n        const charactersList =  await request(`${_apiBase}characters?limit=9&offset=${offset}${_apiKey}`);\r\n\r\n        return charactersList.data.results.map(_transformCharacterInfo);\r\n    }\r\n\r\n   const getCharacterInfo = async (id) => {\r\n        const characterInfo = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n\r\n        return _transformCharacterInfo(characterInfo.data.results[0]);\r\n    }\r\n\r\n    const getCharacterByName = async (name) => {\r\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacterInfo);\r\n    }\r\n\r\n    const _transformComicInfo = (comicInfo) => {\r\n        return {\r\n            id: comicInfo.id,\r\n            title: comicInfo.title,\r\n            description: comicInfo.description || \"There is no description\",\r\n            pageCount: comicInfo.pageCount || \"There is no information about the number of pages\",\r\n            language: comicInfo.textObjects.length > 0 ? comicInfo.textObjects[0].language : 'en-us',\r\n            price: comicInfo.prices[0].price || \"Not available\",\r\n            thumbnail: comicInfo.thumbnail.path + '.' + comicInfo.thumbnail.extension\r\n        }\r\n    }\r\n\r\n    const getComicsList = async (offset = _baseOffset) => {\r\n        const comicsList = await request(`${_apiBase}comics?limit=8&offset=${offset}${_apiKey}`);\r\n\r\n        return comicsList.data.results.map(_transformComicInfo);\r\n    }\r\n\r\n    const getComicInfo = async (id) => {\r\n        const comicInfo = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n\r\n        return  _transformComicInfo(comicInfo.data.results[0]);\r\n    }\r\n\r\n    return {loading, error, getCharactersList, getCharacterInfo, getComicsList, getComicInfo, getCharacterByName, clearError}\r\n}\r\n\r\nexport default useMarvelService;","import {useCallback, useState} from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const requestCallback = async (url, method = \"GET\", body = null,\r\n                                   headers = {'Content-Type': 'application/json'}) => {\r\n\r\n        setLoading(true);\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n            if (!response.ok) {\r\n                throw new Error(`Couldn't get resource'${url}, status ${response.status}`);\r\n            } else {\r\n                setLoading(false)\r\n                return response.json();\r\n            }\r\n        } catch (e) {\r\n            setLoading(false);\r\n            setError(e.message);\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    const request = useCallback(async (url, method = \"GET\", body = null,\r\n                                 headers = {'Content-Type': 'application/json'}) => {\r\n        return await requestCallback(url, method, body, headers)\r\n    }, [])\r\n\r\n    const clearError = useCallback(\r\n        () => {\r\n            setError(null);\r\n        },\r\n        [],\r\n    );\r\n\r\n    return {loading, request, error, clearError}\r\n}"],"names":["ErrorBoundary","state","error","errorInfo","console","log","this","setState","props","children","Component","className","src","errorImg","alt","CharacterView","notFoundImgStyle","characterInfo","name","description","thumbnail","homepage","wiki","objectFit","style","href","useState","character","setCharacter","useMarvelService","loading","getCharacterInfo","clearError","onCharLoaded","charInfo","setRandomChar","id","Math","floor","random","then","useEffect","errorMessage","ErrorMessage","spinner","Spinner","content","onClick","mjolnir","CharacterItem","onCharSelected","onCharFocused","charRef","useRef","ref","onKeyPress","e","key","tabIndex","characters","setCharacters","loadingMore","setLoadingMore","offset","setOffset","charListEnded","setCharListEnded","prevClickedChar","setPrevClickedChar","getCharactersList","onCharListLoaded","newCharListInfo","length","updateCharList","initial","current","classList","remove","add","focus","charItemsList","map","CSSTransition","timeout","classNames","styleButton","TransitionGroup","disabled","maxComicsLength","comics","slice","comicsList","i","charSelectedId","skeleton","results","getCharacterByName","charData","setCharData","validationSchema","yup","charName","required","CharMatchLayout","char","to","NoMatchLayout","initialValues","onSubmit","values","htmlFor","type","placeholder","component","selectedCharId","setSelectedCharId","Helmet","decoration","setLoading","setError","requestCallback","url","method","body","headers","fetch","response","ok","Error","status","json","message","request","useCallback","useHttp","_apiBase","_apiKey","_baseOffset","_transformCharacterInfo","path","extension","urls","items","charactersList","data","res","_transformComicInfo","comicInfo","title","pageCount","language","textObjects","price","prices","getComicsList","getComicInfo"],"sourceRoot":""}